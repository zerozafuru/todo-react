{"ast":null,"code":"var _jsxFileName = \"/home/fusion/projects/learn/todo-react/src/components/TodoForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoForm = props => {\n  _s();\n  const {\n    todos,\n    setTodos,\n    filter,\n    setFilter\n  } = props;\n  const [text, setText] = useState('');\n  const [toggleAll, setToggleAll] = useState();\n  const toggleAllCheck = () => {\n    let check = todos.find(todo => todo.completed == false);\n    if (check == undefined) {\n      return;\n    }\n  };\n  const saveTask = e => {\n    e.preventDefault();\n    if (text !== '') {\n      const todo = {\n        id: uuidv4(),\n        title: text,\n        completed: false\n      };\n      setText(\"\");\n      setTodos([todo, ...todos]);\n      setFilter([todo, ...todos]);\n    }\n  };\n  const deleteAll = () => {\n    const newTodo = todos.filter(todo => todo.completed !== true);\n    setTodos(newTodo);\n    setFilter(newTodo);\n  };\n  const completeAll = () => {\n    const completeTodo = todos.map(item => ({\n      ...item,\n      completed: true\n    }));\n    setTodos(completeTodo);\n    setFilter(completeTodo);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"create-form\",\n    onSubmit: e => saveTask(e),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      onChange: () => completeAll(),\n      checked: toggleAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"create-input\",\n      autoFocus: true,\n      value: text,\n      onChange: e => setText(e.target.value),\n      type: \"text\",\n      placeholder: \"What needs to be done?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => deleteAll(),\n      children: \"\\u2716\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoForm, \"D19CdM7N83pZo21uZCOtep5OpZM=\");\n_c = TodoForm;\nexport default TodoForm;\nvar _c;\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","v4","uuidv4","TodoForm","props","todos","setTodos","filter","setFilter","text","setText","toggleAll","setToggleAll","toggleAllCheck","check","find","todo","completed","undefined","saveTask","e","preventDefault","id","title","deleteAll","newTodo","completeAll","completeTodo","map","item","target","value"],"sources":["/home/fusion/projects/learn/todo-react/src/components/TodoForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst TodoForm = (props) => {\n  const { todos, setTodos, filter, setFilter } = props;\n  const [text, setText] = useState('');\n  const [toggleAll, setToggleAll] = useState()\n  const toggleAllCheck = () => {\n    let check = todos.find(todo => todo.completed == false)\n    if (check == undefined) {\n      return\n    }\n  }\n  const saveTask = (e) => {\n    e.preventDefault();\n    if (text !== '') {\n      const todo = {\n        id: uuidv4(),\n        title: text,\n        completed: false,\n      }\n      setText(\"\");\n      setTodos([todo, ...todos]);\n      setFilter([todo, ...todos])\n    }\n  }\n\n  const deleteAll = () => {\n    const newTodo = todos.filter(todo => todo.completed !== true)\n    setTodos(newTodo);\n    setFilter(newTodo);\n  }\n\n  const completeAll = () => {\n    const completeTodo = todos.map((item) => ({\n      ...item,\n      completed : true\n    }))\n    setTodos(completeTodo)\n    setFilter(completeTodo)\n\n}\n\n\n  return (\n    <form className=\"create-form\" onSubmit={(e) => saveTask(e)}>\n      <input type='checkbox' onChange={() => completeAll()} checked={toggleAll} />\n      <input className=\"create-input\" autoFocus value={text} onChange={(e) => setText(e.target.value)} type=\"text\" placeholder=\"What needs to be done?\" />\n      <button type=\"button\" onClick={() => deleteAll()}>&#10006;</button>\n    </form>\n  )\n}\nexport default TodoForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC;AAEpC,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAA;EAC1B,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EACpD,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,EAAE;EAC5C,MAAMa,cAAc,GAAG,MAAM;IAC3B,IAAIC,KAAK,GAAGT,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,IAAI,KAAK,CAAC;IACvD,IAAIH,KAAK,IAAII,SAAS,EAAE;MACtB;IACF;EACF,CAAC;EACD,MAAMC,QAAQ,GAAIC,CAAC,IAAK;IACtBA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIZ,IAAI,KAAK,EAAE,EAAE;MACf,MAAMO,IAAI,GAAG;QACXM,EAAE,EAAEpB,MAAM,EAAE;QACZqB,KAAK,EAAEd,IAAI;QACXQ,SAAS,EAAE;MACb,CAAC;MACDP,OAAO,CAAC,EAAE,CAAC;MACXJ,QAAQ,CAAC,CAACU,IAAI,EAAE,GAAGX,KAAK,CAAC,CAAC;MAC1BG,SAAS,CAAC,CAACQ,IAAI,EAAE,GAAGX,KAAK,CAAC,CAAC;IAC7B;EACF,CAAC;EAED,MAAMmB,SAAS,GAAG,MAAM;IACtB,MAAMC,OAAO,GAAGpB,KAAK,CAACE,MAAM,CAACS,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAK,IAAI,CAAC;IAC7DX,QAAQ,CAACmB,OAAO,CAAC;IACjBjB,SAAS,CAACiB,OAAO,CAAC;EACpB,CAAC;EAED,MAAMC,WAAW,GAAG,MAAM;IACxB,MAAMC,YAAY,GAAGtB,KAAK,CAACuB,GAAG,CAAEC,IAAI,KAAM;MACxC,GAAGA,IAAI;MACPZ,SAAS,EAAG;IACd,CAAC,CAAC,CAAC;IACHX,QAAQ,CAACqB,YAAY,CAAC;IACtBnB,SAAS,CAACmB,YAAY,CAAC;EAE3B,CAAC;EAGC,oBACE;IAAM,SAAS,EAAC,aAAa;IAAC,QAAQ,EAAGP,CAAC,IAAKD,QAAQ,CAACC,CAAC,CAAE;IAAA,wBACzD;MAAO,IAAI,EAAC,UAAU;MAAC,QAAQ,EAAE,MAAMM,WAAW,EAAG;MAAC,OAAO,EAAEf;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eAC5E;MAAO,SAAS,EAAC,cAAc;MAAC,SAAS;MAAC,KAAK,EAAEF,IAAK;MAAC,QAAQ,EAAGW,CAAC,IAAKV,OAAO,CAACU,CAAC,CAACU,MAAM,CAACC,KAAK,CAAE;MAAC,IAAI,EAAC,MAAM;MAAC,WAAW,EAAC;IAAwB;MAAA;MAAA;MAAA;IAAA,QAAG,eACpJ;MAAQ,IAAI,EAAC,QAAQ;MAAC,OAAO,EAAE,MAAMP,SAAS,EAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEX,CAAC;AAAA,GAhDKrB,QAAQ;AAAA,KAARA,QAAQ;AAiDd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}